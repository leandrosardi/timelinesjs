/*
 * ## TIMELINES.JS
 * Timelines.js
 * 
 * This library follows the best practices enumarated here:
 * https://www.w3.org/community/webed/wiki/JavaScript_best_practices
 * 
 * 
 */


var timelinesJs = {

	/*
	 * Returns the version of this commonsJs library.
	 *  
	 */
	version: function() {
		return '1.0.1';
	},
	
	/*
	 * Draws the timeline container
	 *  
	 */
	draw: function(parent) {
		$(parent).html("<div class='timeline'> </div>");
	},

	/*
	 * Adds a dot to the timeline.
	 * 
	 */
	addDot: function(parent, h) {
		// parse configuration
		id = h['id']; // default value is ''
			if (commonsJs.isDefined(id) == false) { id=''; }

		title = h['title']; // default value is ''
			if (commonsJs.isDefined(title) == false) { title=''; }

		left_or_right = 'left'; // default value is left
			if (h['left'] == false) { left_or_right = 'right'; }

		add_button = h['add_button'] ; // default value is false
			if (add_button == null) { add_button = false; }

		add_button_title = h['add_button_title']; // default value is ''
			if (commonsJs.isDefined(add_button_title) == false) { add_button_title=''; }

		// draw
		o = $('<div></div>');
		o.attr('id', id);
		o.attr('class', 'container ' + left_or_right);
		o.attr('title', title);
		if (add_button == true) {
			a = $('<a></a>');
			a.attr('class', 'add-button simple menu-link');
			a.attr('title', add_button_title);
			a.attr('href', '#');
			
			d = $('<div></div>');
			d.attr('class', 'action text-center');

			i = $('<i></i>');
			i.attr('class', 'icon-plus');
						
			d.html(i);
			a.html(d);
			o.html(a);
		}
		
		// add code
		$(parent).find('.timeline').append(o); 		

		// add-button callback function
		if ( commonsJs.isDefined(h['on_click_add_button']) == true ) { 
			$(parent).find('#'+id).find('.add-button').click(function() {
				h['on_click_add_button']()
			});
		}			
	},
	
	/*
	 * Adds a note to a dot
	 * 
	 */
	addNote: function(parent, dot_id, h) {
		// parse configuration
		id = h['id']; // default value is ''
			if (commonsJs.isDefined(id) == false) { id=''; }

		text = h['text']; // default value is ''
			if (commonsJs.isDefined(text) == false) { text=''; }

		html = h['html']; // default value is ''
			if (commonsJs.isDefined(html) == false) { html=''; }

		edit_button = h['edit_button'] ; // default value is false
			if (edit_button == null) { edit_button = false; }

		copy_button = h['copy_button'] ; // default value is false
			if (copy_button == null) { copy_button = false; }

		delete_button = h['delete_button'] ; // default value is false
			if (delete_button == null) { delete_button = false; }
		
		// getting dot
		dot = $(parent).find('#'+dot_id.toString());
		if (dot.length == 0) {
			throw "Dot with id '"+dot_id.toString()+"' not found.";
		}
		
		// draw
		note = $('<div></div>');
		note.attr('id', id);
		note.attr('class', 'content');
		
		p = $('<p></p>');
		p.text(text);
		p.append(html);
	
		note.html(p);

		actions_div = $('<div></div>');
		actions_div.attr('class', 'actions');
		note.append(actions_div);

		if (edit_button == true) {
			a = $('<a></a>');
			a.attr('class', 'edit-button simple menu-link');
			a.attr('title', 'edit');
			a.attr('href', '#');
			
			i = $('<i></i>');
			i.attr('class', 'icon-pencil');

			a.html(i);
			actions_div.append(a);
		}

		if (copy_button == true) {
			a = $('<a></a>');
			a.attr('class', 'copy-button simple menu-link');
			a.attr('title', 'copy');
			a.attr('href', '#');
			
			i = $('<i></i>');
			i.attr('class', 'icon-copy');

			a.html(i);
			actions_div.append(a);
		}

		if (delete_button == true) {
			a = $('<a></a>');
			a.attr('class', 'delete-button simple menu-link');
			a.attr('title', 'remove');
			a.attr('href', '#');
			
			i = $('<i></i>');
			i.attr('class', 'icon-trash');

			a.html(i);
			actions_div.append(a);
		}

		// add code
		// si este dot tiene un boton icon-plus al final, entonces agrego la nota justo antes del dicho boton.
		// si este dot NO tiene un boton icon-plus al final, entonces agrego la nota al final.
		if ( $('#' +dot.attr('id')+ ' .add-button').length == 1 ) {
			note.insertBefore('#' +dot.attr('id')+ ' .add-button');			
		} else {
			dot.append(note);
		}

		// edit-button callback function
		if ( commonsJs.isDefined(h['on_click_edit_button']) == true ) { 
			$(parent).find('#'+dot_id).find('#'+id).find('.edit-button').click(function() {
				h['on_click_edit_button']()
			});
		}

		// copy-button callback function
		if ( commonsJs.isDefined(h['on_click_copy_button']) == true ) { 
			$(parent).find('#'+dot_id).find('#'+id).find('.copy-button').click(function() {
				h['on_click_copy_button']()
			});
		}

		// delete-button callback function
		if ( commonsJs.isDefined(h['on_click_delete_button']) == true ) { 
			$(parent).find('#'+dot_id).find('#'+id).find('.delete-button').click(function() {
				h['on_click_delete_button']()
			});
		}
	},
	
	/*
	 * Removes a note from a dot
	 * 
	 */
	removeNote: function(parent, dot_id, note_id) {
		$(parent).find('#'+dot_id).find('#'+note_id).hide('fade', function() {
			$(parent).find('#'+dot_id).find('#'+note_id).remove();				
		});
	},
	
}; // var templatesJs;